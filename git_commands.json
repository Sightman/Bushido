[{
        "command": "git config -l",
        "action": "List all configuration variables already set up"
    },
    {
        "command": "git config user.email=[myemail@example.com]",
        "action": "Configures the user's email address"
    },
    {
        "command": "git config user.name=[John Doe]",
        "action": "Configures the user's name"
    },
    {
        "command": "git commit -am \"Message\"",
        "action": "Confirms all changes of previously added files"
    },
    {
        "command": "git diff",
        "action": "Shows the changes made in the current staging"
    },
    {
        "command": "git diff <commit_id_from> <commit_id_to>",
        "action": "Shows the changes made to the commit <commit_id_to> from the commit <commit_id_from>"
    },
    {
        "command": "git checkout <commit_id> [file_name]",
        "action": "Loads the commit <commit_id> changes made in [file_name]"
    },
    {
        "command": "git rm <file_name>",
        "action": "Removes <file_name> from the hard drive"
    },
    {
        "command": "git rm --cached <file_name>",
        "action": "Removes <file_name> from the staging area and the repository"
    },
    {
        "command": "git rm --force <file_name>",
        "action": "Removes <file_name> from the hard drive, the staging area and the repository"
    },
    {
        "command": "git reset <commit_id> --soft",
        "action": "Loads the commit <commit_id> keeping the last changes in the staging area"
    },
    {
        "command": "git reset <commit_id> --hard",
        "action": "Loads the commit <commit_id> discarding all changes in the staging area and the forward commits in the repository"
    },
    {
        "command": "git reset HEAD [file_name]",
        "action": "Removes the whole changes in [file_name] from the staging area"
    },
    {
        "command": "git remote add <ref-name> <repo-URL>",
        "action": "Links the local repo with a remote one located in <repo-URL> and set its reference as <ref-name>"
    },
    {
        "command": "git pull <ref-name> <branch-name> [--allow-unrelated-histories] [--rebase=false]",
        "action": "Merges history from the branch <branch-name> of <ref-name> repo and optionally allows fetching though the remote history doesn't match the local counterpart and disable the rebase flag"
    },
    {
        "command": "git remote set-url <ref-name> <repo-URL>",
        "action": "Replaces the current <ref-name> repo URL with which is specified by <repo-URL>"
    },
    {
        "command": "git log --all",
        "action": "Shows the whole project history"
    },
    {
        "command": "git log --all --graph",
        "action": "Show the whole project history branches graph"
    },
    {
        "command": "git log --all --graph --decorate",
        "action": "Shows the whole project history branches graph in color"
    },
    {
        "command": "git log --all --graph --decorate --oneline",
        "action": "Shows the whole project history branches compact graph in color"
    },
    {
        "command": "git tag -a <tag> -m \"Message\" <hashcode>",
        "action": "Adds a tag to a commit identified by its hashcode"
    },
    {
        "command": "git tag",
        "action": "Shows the current tags"
    },
    {
        "command": "git show-ref --tags",
        "action": "Shows the commits hashcode with its associated tag"
    },
    {
        "command": "git push <ref-name> <branch-name> --tags",
        "action": "Merges the local branch tags with the <branch-name> tags of the repo <ref-name>"
    },
    {
        "command": "git tag -d <tag>",
        "action": "Deletes the tag <tag> from the local repo"
    },
    {
        "command": "git push <ref-name> :refs/tags/<tag>",
        "action": "Updates the reference to the tag <tag> in the remote repo <ref-name>"
    }
]